
Dame un ejemplo de api web en net 8 c# con arquitectura hexagonal, que se conecte con sqlserver y consulte datos de una tabla, especificando en que capa va cada uno de las clases e interfaces, mostrando los namespaces y using de cada clase, ademas describa de que tipo de proyecto deberia ser cada una de las capas, que maneje principios solid, patron CQRS con las mejores practicas de desarrollo

Arquitectura Hexagonal

Core (Domino o Aplicación): 
Es el núcleo de la aplicación y no debe depender directamente de infraestructuras externas. 
Solo define la lógica de negocio.
Contiene las entidades y modelos.
Define los contratos y las interfaces.

Capa de Aplicación (Application)
Implementa el patrón CQRS con Queries y Commands.
Maneja la lógica de negocio y casos de uso.

Application Services: 
Contiene casos de uso y puede ver la capa de dominio. 
No debe depender de detalles de infraestructura.

Adapters (Entradas y Salidas): 
Son las interfaces con el mundo exterior (base de datos, API externas, UI). 
Pueden depender de los Application Services.

Capa de Entrada (Adapters)
Implementa controladores o cualquier servicio expuesto (REST API, GraphQL, etc.).

Infraestructura: 
Aquí van las implementaciones de persistencia, comunicación con APIs, etc. 
Puede depender de Application Services, pero no del núcleo de negocio.
Implementa la comunicación con SQL Server usando ADO.NET.
Define los repositorios y adaptadores externos.

Razón de esta separación
Independencia del dominio: Permite que los cambios en la infraestructura no afecten la lógica de negocio.

Testabilidad: Al aislar la lógica de negocio, es más fácil hacer pruebas unitarias.

Flexibilidad: Facilita cambiar bases de datos, frameworks o interfaces sin modificar el núcleo.

Mejores prácticas y patrones de implementación
Dependencia hacia adentro: Las capas externas dependen de las internas, nunca al revés.

Uso de interfaces (Puertos y Adaptadores): 
Define interfaces en el dominio y permite implementaciones en la infraestructura.
Inversión de dependencias: Usa Dependency Injection para evitar acoplamientos directos.
Aplicación de DDD (Domain-Driven Design): Organiza bien los agregados y las entidades del negocio.
Eventos de dominio: Para comunicar cambios sin generar acoplamiento entre capas.
CQRS y Mediator: Para separar consultas de comandos y reducir dependencias.

https://copilot.microsoft.com/chats/X2G9oA5aMXhEvvULeTguE

Creacion de Api de Net Core

Conexion con repositorio para subir Primer Commit
git init
ignorar el folder .vs
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Ederam/ApiHexagonal.git
git push -u origin main

Esquema de arquitectura hexagonal para el ejemplo

/PedidosAPI
│── /Core
│   ├── /Dominio
│   │   ├── Entidades
│   │   ├── ValueObjects
│   │   ├── Agregados
│   ├── /Aplicacion
│   │   ├── CasosDeUso
│   │   ├── Interfaces (Puertos)
│── /Infraestructura
│   ├── Persistencia
│   ├── Repositorios (Adaptadores)
│── /Presentacion
│   ├── Controladores (Adaptadores)
│── /Configuracion
│── Program.cs
│── appsettings.json


Agregar las capas que se van a utilizar

Tipo de Proyecto para Cada Capa
Dominio --> Core → Biblioteca de clases (.NET Class Library)
Infraestructura → Biblioteca de clases (.NET Class Library)
ApiHexagonal para el ejemplo --> Presentación → API Web ASP.NET Core
Configuración → Proyecto principal (Startup)

Orden Ejecutado
Creacion de Capas
	Dominio
	Infraestructura
	Aplicacion

Se agrega cadena de conexion en archivo settings del api
D:\ER-DEV\.Net\API\Arquitectura Hexagonal\ApiHexagonal\ApiHexagonal\appsettings.json

Creacion de entidad en capa dominio/entidades
D:\ER-DEV\.Net\API\Arquitectura Hexagonal\ApiHexagonal\Dominio\Entidades\Pedido.cs

Creacion de Puertos (Interfaces en la Capa de Aplicación)
D:\ER-DEV\.Net\API\Arquitectura Hexagonal\ApiHexagonal\Aplicacion\Interfaces\IPedidoRepository.cs

Casos de Uso en la Capa de Aplicación
Caso de Uso – Obtener Pedido
D:\ER-DEV\.Net\API\Arquitectura Hexagonal\ApiHexagonal\Aplicacion\CasosDeUso\ObtenerPedidoUseCase.cs

Implementación de la Infraestructura
Repositorio con SQL Server
AGregar referencias de 
	Aplicacion.Interfaces;
    Dominio.Entidades;
    Infraestructura.Persistencia;
	EntityFramework
D:\ER-DEV\.Net\API\Arquitectura Hexagonal\ApiHexagonal\Infraestructura\Repositorios\PedidoRepository.cs

Contexto de Base de Datos
D:\ER-DEV\.Net\API\Arquitectura Hexagonal\ApiHexagonal\Infraestructura\Persistencia\AppDbContext.cs

Implementación de la Capa de Presentación
Controlador en la API Web
Agregar referencias de proyectos
	Dominio
	Aplicacion

Configuración en Program.cs

validar conexion de BD
"ConnectionStrings": {
    "DefaultConnection": "Server=(LocalDb)\\MyServer2025;Database=GESTION_ESTUDIANTES;Integrated Security=True;TrustServerCertificate=True;"
  }

Ejecuta pero falta ajustar la tabla y las consultas

AGregar funcionalidad para obtener UsuariosReact de la tabla de Gestion de Estudientes

1. Crear entidad Usuario en la capa de Dominio
2. Crear interfaz IUsuariosReactRepository en la capa de Aplicación
3. Crear caso de uso ObtenerUsuarioUseCase en la capa de Aplicación
4. Agregar la tabla para la persistencia de UsuariosReact en la base de datos
5. Implementar UsuarioReactRepository en la capa de Infraestructura
6. Crear controlador UsuarioController en la capa de Presentación
7. Configurar la inyección de dependencias en Program.cs
8. Probar la API para obtener usuarios

Se ajustan valores en las propiedades de la entidad UsuarioReact 
y se crea el repositorio para interactuar con la base de datos.
Se agrega un constructor sin parámetros para la entidad UsuarioReact

--Implementacion de consumo de base de datos a traves de ADO.NET

Dame un ejemplo de consumo de base de datos de sql server con ADO para obtener todos los datos de una tabla en arquitectura hexagonal en net 8 c#, utilizando patron CQRS, Inyeccion de dependencias, principios SOLID y especificame en que capa quedaria cada clase e interfaz

https://copilot.microsoft.com/chats/nYb8PUC9prRxF4ZGZpbLr

======Paso a paso para consumir la tabla mediante ADO.NET

Creacion de entidad UsuarioReactToAdo 
	Se dejan las mismas propiedades
Creacion de interfaz de repository en el dominio IUsuarioReactToAdoRepository
Capa de Aplicación (Application)
Implementamos el Query Handler para obtener los usuarios usando CQRS:
Creacion de folder para Queries en la capa de Aplicación
	Creacion de clase ObtenerUsuariosReactToAdoQuery
	AGregar Nuget de MediatR para el manejo de consultas
	Ajustar metodos e implementar la interfaz correspondiente
Capa de Infraestructura (Infrastructure)
Aquí conectamos con SQL Server usando ADO.NET:
	Agregar repositorio UsuarioReactToAdoRepository en infraestructura
	Agregar using de using Microsoft.Extensions.Configuration 
	Agregar using de System.Data.SqlClient
	Agregar consulta SQL para obtener los datos de la tabla UsuariosReact
Capa de Entrada (Adapters)
	Aquí creamos un Controller en ASP.NET Core para exponer el endpoint:
Configuración de Dependencias en Program.cs
Para inyectar dependencias y aplicar principios SOLID:
	builder.Services.AddScoped<IUsuarioRepository, UsuarioRepository>();
	builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(typeof(ObtenerUsuariosQuery).Assembly));

